diff --git a/Makefile b/Makefile
index 511bcbe..059beb7 100644
--- a/Makefile
+++ b/Makefile
@@ -5,4 +5,4 @@ clean:
 	$(RM) kmeans
 
 kmeans: kmeans.c readcsv.c
-	$(CC) $<
+	$(CC) $< -o $@
diff --git a/a.out b/a.out
deleted file mode 100755
index 0cdb62b..0000000
Binary files a/a.out and /dev/null differ
diff --git a/kmeans.c b/kmeans.c
index be8023b..ec3037a 100644
--- a/kmeans.c
+++ b/kmeans.c
@@ -18,8 +18,10 @@
     -------------------------------------------------------------------------
 */
 
+#include <assert.h>
 #include <stdio.h>  // printf
 #include <math.h>   // INFINITY macro
+#include "readcsv.c"
 
 //  matrix (nxm) infinity norm
 double norm (double *matrix, int n, int m);
@@ -29,49 +31,12 @@ double norm (double *matrix, int n, int m);
 //
 #   define TOL 1.0e-5
 
-//  -------------------------------------------------------------------------
-//  Sample data
-//
-#   define D_N 27
-#   define D_M 2
-
-static const double 
-data [D_N][D_M] = {
-    { 340, 2.6 },
-    { 245, 2.7 },
-    { 420, 2.0 },
-    { 375, 2.6 },
-    { 180, 3.7 },
-    { 115, 1.4 },
-    { 170, 1.5 },
-    { 160, 5.9 },
-    { 265, 2.6 },
-    { 300, 2.3 },
-    { 340, 2.5 },
-    { 340, 2.5 },
-    { 355, 2.4 },
-    { 205, 2.5 },
-    { 185, 2.7 },
-    { 135, 0.6 },
-    {  70, 6.0 },
-    {  45, 5.4 },
-    {  90, 0.8 },
-    { 135, 0.5 },
-    { 200, 1.0 },
-    { 155, 1.8 },
-    { 195, 1.3 },
-    { 120, 0.7 },
-    { 180, 2.5 },
-    { 170, 1.2 },
-    { 110, 2.6 }
-};
-
 
 //  -------------------------------------------------------------------------
 //  Initial centroids
 //
 #   define C_N 3
-#   define C_M D_M
+#   define C_M 2
 
 static double 
 centroids [C_N][C_M] = {
@@ -83,12 +48,29 @@ centroids [C_N][C_M] = {
 
 //  -------------------------------------------------------------------------
 //  k-means routine
-int main ()
+int main (int argc, char *argv[])
 {
-    int clusters [D_N]; // cluster classification
+    int n, m;
+	char data [MAX_N][MAX_M] = { 0 };
+    
+    //  read input from file
+    readcsv (argv[1], data, &n, &m);
+    
+    assert (m == C_M);
+    int i=0, j=0, k=0;
+
+    printf ("%ix%i\n", n, m);
+    for (i = 0; i < n; ++i) {
+        printf ("{ ");
+        for (j = 0; j < m; ++j)
+			printf ("%s ", data[i*m+j]);
+        printf ("}\n");
+    }
+
+
+    int clusters [n]; // cluster classification
     double cent_last [C_N][C_M]; // centroids (last iteration)
 
-    int i=0, j=0, k=0;
     double c=0.0, d=0.0, d_min=INFINITY;
 
     //
@@ -100,14 +82,14 @@ int main ()
 
         int cluster_pop [C_N] = { 0 }; // cluster populations
 
-        for (i = 0; i < D_N; ++i) {
+        for (i = 0; i < n; ++i) {
             d_min = INFINITY;
 
             for (j = 0; j < C_N; ++j) {
                 //  calculate distance to centroid j
                 d = 0.0;
 
-                for (k = 0; k < D_M; ++k) {
+                for (k = 0; k < m; ++k) {
                     c = data[i][k] - centroids[j][k];
                     d += c * c;
                 }
@@ -127,13 +109,13 @@ int main ()
         //  data column sum for each cluster
         double data_sum [C_N][C_M] = { 0 };
 
-        for (i = 0; i < D_N; ++i)
-            for (k = 0; k < D_M; ++k)
+        for (i = 0; i < n; ++i)
+            for (k = 0; k < m; ++k)
                 data_sum[clusters[i]][k] += data[i][k];
 
         //  centroid coordinate is mean of the column
         for (j = 0; j < C_N; ++j) {
-            for (k = 0; k < D_M; ++k) {
+            for (k = 0; k < m; ++k) {
                 cent_last[j][k] = centroids[j][k];
                 centroids[j][k] = data_sum[j][k] / cluster_pop[j];
             }
diff --git a/readcsv.c b/readcsv.c
index f193beb..0035905 100644
--- a/readcsv.c
+++ b/readcsv.c
@@ -36,21 +36,3 @@ void readcsv (char *file, char data[][MAX_M], int *n, int *m)
             ++(*n);
     }
 }
-
-int main (int argc, char *argv[])
-{
-    int n, m;
-	char data [MAX_N][MAX_M] = { 0 };
-    readcsv (argv[1], data, &n, &m);
-
-    int i, j;
-    printf ("%ix%i\n", n, m);
-    for (i = 0; i < n; ++i) {
-        printf ("{ ");
-        for (j = 0; j < m; ++j)
-			printf ("%s ", data[i*m+j]);
-        printf ("}\n");
-    }
-
-    return 0;
-}
